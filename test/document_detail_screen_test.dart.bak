import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:carta_os/src/features/document/models/document.dart';
import 'package:carta_os/src/features/document/presentation/screens/document_detail_screen.dart';
import 'package:carta_os/src/features/document/domain/export_service.dart';
import 'package:mockito/mockito.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:carta_os/src/localization/app_localizations.dart';
import 'package:mockito/annotations.dart';

import 'document_detail_screen_test.mocks.dart';

@GenerateMocks([ExportService])
void main() {
  group('DocumentDetailScreen', () {
    final testDocument = Document.example();
    late MockExportService mockExportService;

    setUp(() {
      mockExportService = MockExportService();
      when(mockExportService.exportDocument(document: anyNamed('document'), targetDirectory: anyNamed('targetDirectory'), idLabel: anyNamed('idLabel'), createdAtLabel: anyNamed('createdAtLabel'), processedAtLabel: anyNamed('processedAtLabel'), statusLabel: anyNamed('statusLabel'), fileTypeLabel: anyNamed('fileTypeLabel'), pagesLabel: anyNamed('pagesLabel'), summaryLabel: anyNamed('summaryLabel'), tagsLabel: anyNamed('tagsLabel'), pendingProcessingLabel: anyNamed('pendingProcessingLabel'), unknownLabel: anyNamed('unknownLabel'), notApplicableLabel: anyNamed('notApplicableLabel'), includeContent: anyNamed('includeContent'))).thenAnswer((_) async => {});
    });

    testWidgets('should display document details correctly', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      // Verificar se o título do documento é exibido
      expect(find.text(testDocument.title), findsOneWidget);

      // Verificar se o conteúdo do documento é exibido
      expect(find.text(testDocument.content), findsOneWidget);

      // Verificar se o sumário do documento é exibido (se existir)
      if (testDocument.summary != null) {
        expect(find.text(testDocument.summary!), findsOneWidget);
      }

      // Verificar se as tags são exibidas (se existirem)
      if (testDocument.tags != null) {
        for (String tag in testDocument.tags!) {
          expect(find.text(tag), findsOneWidget);
        }
      }
    });

    testWidgets('should display status information', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      // Verificar se as informações de status são exibidas
      expect(find.textContaining('Type'), findsOneWidget);
      expect(find.textContaining('Pages'), findsOneWidget);
    });

    testWidgets('should have share and menu options in app bar', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      // Verificar se os ícones estão presentes
      expect(find.byIcon(Icons.share), findsOneWidget);
      expect(find.byType(PopupMenuButton<String>), findsOneWidget);
    });

    testWidgets('should show export options dialog when export is selected', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

      await tester.tap(find.byWidgetPredicate(
        (widget) => widget is PopupMenuItem && widget.child is Text && (widget.child as Text).data == 'Export',
        skipOffstage: false,
      ));
      await tester.pumpAndSettle();

      expect(find.byType(AlertDialog), findsOneWidget);
      expect(find.text('Export'), findsOneWidget);
      expect(find.text('Include Document Content'), findsOneWidget);
      expect(find.text('Warning: Document content may contain sensitive information. Export with caution.'), findsOneWidget);
    });

    testWidgets('should call exportDocument with correct parameters when export button is tapped', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

      await tester.tap(find.byWidgetPredicate(
        (widget) => widget is PopupMenuItem && widget.child is Text && (widget.child as Text).data == 'Export',
        skipOffstage: false,
      ));
      await tester.pumpAndSettle();

      // Simulate selecting a directory
      // Mock FilePicker.platform.getDirectoryPath() to return a path
      // This requires mocking static methods, which is complex. For now, we'll assume it returns a path.
      // And focus on verifying the call to exportService.exportDocument

      await tester.tap(find.byKey(const Key('exportButton'))); // Tap the ElevatedButton with text 'Export'
      await tester.pumpAndSettle();

      verify(mockExportService.exportDocument(
        document: testDocument,
        targetDirectory: anyNamed('targetDirectory'),
        idLabel: 'ID',
        createdAtLabel: 'Created',
        processedAtLabel: 'Processed',
        statusLabel: 'Status',
        fileTypeLabel: 'Type',
        pagesLabel: 'Pages',
        summaryLabel: 'Summary',
        tagsLabel: 'Tags',
        pendingProcessingLabel: 'Pending processing',
        unknownLabel: 'Unknown',
        notApplicableLabel: 'N/A',
        includeContent: true,
      )).called(1);
    });

    testWidgets('should show SnackBar on successful export', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

      await tester.tap(find.byWidgetPredicate(
        (widget) => widget is PopupMenuItem && widget.child is Text && (widget.child as Text).data == 'Export',
        skipOffstage: false,
      ));
      await tester.pumpAndSettle();

      // Simulate successful export
      when(mockExportService.exportDocument(document: anyNamed('document'), targetDirectory: anyNamed('targetDirectory'), idLabel: anyNamed('idLabel'), createdAtLabel: anyNamed('createdAtLabel'), processedAtLabel: anyNamed('processedAtLabel'), statusLabel: anyNamed('statusLabel'), fileTypeLabel: anyNamed('fileTypeLabel'), pagesLabel: anyNamed('pages'), summaryLabel: anyNamed('summaryLabel'), tagsLabel: anyNamed('tagsLabel'), pendingProcessingLabel: anyNamed('pendingProcessingLabel'), unknownLabel: anyNamed('unknownLabel'), notApplicableLabel: anyNamed('notApplicableLabel'), includeContent: anyNamed('includeContent'))).thenAnswer((_) async => {});

      await tester.tap(find.byKey(const Key('exportButton'))); // Tap the ElevatedButton with text 'Export'
      await tester.pumpAndSettle();

      expect(find.textContaining('Document exported to'), findsOneWidget);
    });

    testWidgets('should show SnackBar on export cancellation', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
          ],
          supportedLocales: [
            const Locale('en', ''),
          ],
          home: DocumentDetailScreen(document: testDocument, exportService: mockExportService),
        ),
      );

      await tester.tap(find.byIcon(Icons.more_vert));
      await tester.pumpAndSettle();

      await tester.tap(find.byWidgetPredicate(
        (widget) => widget is PopupMenuItem && widget.child is Text && (widget.child as Text).data == 'Export',
        skipOffstage: false,
      ));
      await tester.pumpAndSettle();

      await tester.tap(find.byKey(const Key('cancelButton'))); // Tap the TextButton with text 'Cancel'
      await tester.pumpAndSettle();

      expect(find.text('Export canceled.'), findsOneWidget);
    });
  });
}